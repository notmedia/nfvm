#!/usr/bin/env node

'use strict';

const caporal = require('caporal');
const chalk = require('chalk');

const pkg = require('../package.json');
const { Manager } = require('../lib/API');

caporal.version(pkg.version);

caporal.command('init')
  .description('create local .nfvmrc.json config file')
  .action(() => {
    try {
      Manager.initialize();
    } catch (err) {
      console.log(chalk.red(err));
    }
  });

caporal.command('create')
  .argument('<packname>')
  .option('-f, --file <file>', 'create file') // TODO: validate file?
  .option('-v <version>', 'version of pack or file')
  .option('--folder <path>', 'create from folder')
  .option('-g, --global')
  .action(async (args, options) => {
    try {
      const manager = new Manager(true, options.global);

      if (options.file) {
        await manager.createFile(args.packname, options.file, options.version, options.folder);
      } else {
        await manager.createPack(args.packname, options.version, options.folder);
      }
    } catch (err) {
      console.log(chalk.red(err));
    }
  });

caporal.command('remove')
  .argument('<packname>')
  .option('-f, --file <file>', 'remove file')
  .option('-v <version>', 'version of pack or file')
  .option('-g, --global')
  .action((args, options) => {
    try {
      const manager = new Manager(true, options.global);

      if (options.file) {
        manager.removeFile(args.packname, options.file, options.version);
      } else {
        manager.removePack(args.packname, options.version);
      }
    } catch (err) {
      console.log(chalk.red(err));
    }
  });

caporal.command('set')
  .argument('<packname>')
  .argument('<version>')
  .option('-g, --global')
  .action((args, options) => {

  });

caporal.command('list')
  .option('-p, --pack <packname>')
  .option('-g, --global')
  .action((args, options) => {
    try {
      const manager = new Manager(true, options.global);

      manager.list(options.packname);
    } catch (err) {
      console.log(chalk.red(err));
    }
  });

caporal.parse(process.argv);
