#!/usr/bin/env node

const chalk = require('chalk');

const { Manager } = require('../lib/API');
const { argv } = require('yargs')
  .command('init', 'initialize .nfvmrc.json config file', {}, () => {
    try {
      Manager.initialize();
    } catch (err) {
      console.log(chalk.red(err));
    }
  })
  .command('create <packname>', 'create pack/file/version', (yargs) => {
    yargs
      .positional('packname', {
        type: 'string',
      })
      .option('file', {
        alias: 'f',
        describe: 'create file',
      })
      .option('version', {
        alias: 'v',
        describe: 'create version of pack or file',
      });
  }, async (argv) => {
    try {
      const manager = new Manager(true, argv.global);

      if (argv.file) {
        await manager.createFile(argv.packname, argv.file, argv.v);
      } else {
        await manager.createPack(argv.packname, argv.v);
      }
    } catch (err) {
      console.log(chalk.red(err));
    }
  })
  .command('remove <packname>', 'remove pack/file/version', (yargs) => {
    yargs
      .positional('packname', {
        type: 'string',
      })
      .option('file', {
        alias: 'f',
        describe: 'remove file',
      })
      .option('version', {
        alias: 'v',
        describe: 'remove version of pack or file',
      });
  }, async (argv) => {
    try {
      const manager = new Manager(true, argv.global);

      if (argv.file) {
        manager.removeFile(argv.packname, argv.file, argv.v);
      } else {
        await manager.removePack(argv.packname, argv.v);
      }
    } catch (err) {
      console.log(chalk.red(err));
    }
  })
  .command('set <packname> <version>', 'switch pack version', (yargs) => {
    yargs
      .positional('packname', {
        type: 'string',
      })
      .positional('version', {
        type: 'string',
      });
  }, async (argv) => {
    try {
      const manager = new Manager(true, argv.global);

      await manager.set(argv.packname, argv.version);
    } catch (err) {
      console.log(chalk.red(err));
    }
  })
  .command('list', '', (yargs) => {
    yargs
      .option('packname', {
        alias: 'p',
      });
  }, (argv) => {
    try {
      const manager = new Manager(true, argv.global);

      manager.list(argv.packname);
    } catch (err) {
      console.log(chalk.red(err));
    }
  })
  .option('global', {
    alias: 'g',
    default: false,
  })
  .help();
